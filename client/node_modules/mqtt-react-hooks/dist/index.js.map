{"version":3,"file":"index.js","sources":["../lib/Context.tsx","../lib/Connector.tsx","../lib/useMqttState.tsx","../lib/useSubscription.tsx"],"sourcesContent":["/* istanbul ignore file */\n\nimport { createContext } from 'react';\n\nimport { IMqttContext } from './types';\n\nexport default createContext<IMqttContext>({} as IMqttContext);\n","import React, { useEffect, useState, useMemo, useRef } from 'react';\n\nimport { connect, MqttClient } from 'mqtt';\n\nimport MqttContext from './Context';\nimport { Error, ConnectorProps, IMqttContext } from './types';\n\nexport default function Connector({\n  children,\n  brokerUrl,\n  options = { keepalive: 0 },\n  parserMethod,\n}: ConnectorProps) {\n  // Using a ref rather than relying on state because it is synchronous\n  const clientValid = useRef(false);\n  const [connectionStatus, setStatus] = useState<string | Error>('Offline');\n  const [client, setClient] = useState<MqttClient | null>(null);\n\n  useEffect(() => {\n    if (!client && !clientValid.current) {\n      // This synchronously ensures we won't enter this block again\n      // before the client is asynchronously set\n      clientValid.current = true;\n      setStatus('Connecting');\n      console.log(`attempting to connect to ${brokerUrl}`);\n      const mqtt = connect(brokerUrl, options);\n      mqtt.on('connect', () => {\n        console.debug('on connect');\n        setStatus('Connected');\n        // For some reason setting the client as soon as we get it from connect breaks things\n        setClient(mqtt);\n      });\n      mqtt.on('reconnect', () => {\n        console.debug('on reconnect');\n        setStatus('Reconnecting');\n      });\n      mqtt.on('error', err => {\n        console.log(`Connection error: ${err}`);\n        setStatus(err.message);\n      });\n      mqtt.on('offline', () => {\n        console.debug('on offline');\n        setStatus('Offline');\n      });\n      mqtt.on('end', () => {\n        console.debug('on end');\n        setStatus('Offline');\n      });\n    }\n  }, [client, clientValid, brokerUrl, options]);\n\n  // Only do this when the component unmounts\n  useEffect(\n    () => () => {\n      if (client) {\n        console.log('closing mqtt client');\n        client.end(true);\n        setClient(null);\n        clientValid.current = false;\n      }\n    },\n    [client, clientValid],\n  );\n\n  // This is to satisfy\n  // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-constructed-context-values.md\n  const value: IMqttContext = useMemo<IMqttContext>(\n    () => ({\n      connectionStatus,\n      client,\n      parserMethod,\n    }),\n    [connectionStatus, client, parserMethod],\n  );\n\n  return <MqttContext.Provider value={value}>{children}</MqttContext.Provider>;\n}\n","import { useContext } from 'react';\n\nimport MqttContext from './Context';\nimport { IMqttContext as Context } from './types';\n\nexport default function useMqttState() {\n  const { connectionStatus, client, parserMethod } = useContext<Context>(\n    MqttContext,\n  );\n\n  return {\n    connectionStatus,\n    client,\n    parserMethod,\n  };\n}\n","import { useContext, useEffect, useCallback, useState } from 'react';\n\nimport { IClientSubscribeOptions } from 'mqtt';\nimport { matches } from 'mqtt-pattern';\n\nimport MqttContext from './Context';\nimport { IMqttContext as Context, IUseSubscription, IMessage } from './types';\n\nexport default function useSubscription(\n  topic: string | string[],\n  options: IClientSubscribeOptions = {} as IClientSubscribeOptions,\n): IUseSubscription {\n  const { client, connectionStatus, parserMethod } = useContext<Context>(\n    MqttContext,\n  );\n\n  const [message, setMessage] = useState<IMessage | undefined>(undefined);\n\n  const subscribe = useCallback(async () => {\n    client?.subscribe(topic, options);\n  }, [client, options, topic]);\n\n  const callback = useCallback(\n    (receivedTopic: string, receivedMessage: any) => {\n      if ([topic].flat().some(rTopic => matches(rTopic, receivedTopic))) {\n        setMessage({\n          topic: receivedTopic,\n          message:\n            parserMethod?.(receivedMessage) || receivedMessage.toString(),\n        });\n      }\n    },\n    [parserMethod, topic],\n  );\n\n  useEffect(() => {\n    if (client?.connected) {\n      subscribe();\n\n      client.on('message', callback);\n    }\n    return () => {\n      client?.off('message', callback);\n    };\n  }, [callback, client, subscribe]);\n\n  return {\n    client,\n    topic,\n    message,\n    connectionStatus,\n  };\n}\n"],"names":["createContext","children","brokerUrl","options","keepalive","parserMethod","clientValid","useRef","connectionStatus","setStatus","useState","client","setClient","useEffect","current","console","log","mqtt","connect","on","debug","err","message","end","value","useMemo","React","createElement","MqttContext","Provider","useContext","topic","setMessage","undefined","subscribe","useCallback","async","callback","receivedTopic","receivedMessage","flat","some","rTopic","matches","toString","connected","off"],"mappings":"0NAMeA,EAAAA,EAAAA,cAA4B,sBCC7B,UAAoBC,SAChCA,EAAQC,UACRA,EAASC,QACTA,EAAU,CAAEC,UAAW,GAAGC,aAC1BA,IAGA,MAAMC,EAAcC,UAAO,IACpBC,EAAkBC,GAAaC,EAAQA,SAAiB,YACxDC,EAAQC,GAAaF,EAAQA,SAAoB,MAExDG,EAAAA,WAAU,KACR,IAAKF,IAAWL,EAAYQ,QAAS,CAGnCR,EAAYQ,SAAU,EACtBL,EAAU,cACVM,QAAQC,IAAI,4BAA4Bd,KACxC,MAAMe,EAAOC,EAAAA,QAAQhB,EAAWC,GAChCc,EAAKE,GAAG,WAAW,KACjBJ,QAAQK,MAAM,cACdX,EAAU,aAEVG,EAAUK,MAEZA,EAAKE,GAAG,aAAa,KACnBJ,QAAQK,MAAM,gBACdX,EAAU,mBAEZQ,EAAKE,GAAG,SAASE,IACfN,QAAQC,IAAI,qBAAqBK,KACjCZ,EAAUY,EAAIC,YAEhBL,EAAKE,GAAG,WAAW,KACjBJ,QAAQK,MAAM,cACdX,EAAU,cAEZQ,EAAKE,GAAG,OAAO,KACbJ,QAAQK,MAAM,UACdX,EAAU,iBAGb,CAACE,EAAQL,EAAaJ,EAAWC,IAGpCU,EAAAA,WACE,IAAM,KACAF,IACFI,QAAQC,IAAI,uBACZL,EAAOY,KAAI,GACXX,EAAU,MACVN,EAAYQ,SAAU,KAG1B,CAACH,EAAQL,IAKX,MAAMkB,EAAsBC,EAAAA,SAC1B,KAAO,CACLjB,iBAAAA,EACAG,OAAAA,EACAN,aAAAA,KAEF,CAACG,EAAkBG,EAAQN,IAG7B,OAAOqB,EAAA,QAAAC,cAACC,EAAYC,SAAQ,CAACL,MAAOA,GAAQvB,+CCtEhC,WACZ,MAAMO,iBAAEA,EAAgBG,OAAEA,EAAMN,aAAEA,GAAiByB,EAAAA,WACjDF,GAGF,MAAO,CACLpB,iBAAAA,EACAG,OAAAA,EACAN,aAAAA,4BCLoB,SACtB0B,EACA5B,EAAmC,IAEnC,MAAMQ,OAAEA,EAAMH,iBAAEA,EAAgBH,aAAEA,GAAiByB,EAAAA,WACjDF,IAGKN,EAASU,GAActB,EAAQA,cAAuBuB,GAEvDC,EAAYC,EAAAA,aAAYC,UAC5BzB,MAAAA,GAAAA,EAAQuB,UAAUH,EAAO5B,KACxB,CAACQ,EAAQR,EAAS4B,IAEfM,EAAWF,EAAAA,aACf,CAACG,EAAuBC,KAClB,CAACR,GAAOS,OAAOC,MAAKC,GAAUC,UAAQD,EAAQJ,MAChDN,EAAW,CACTD,MAAOO,EACPhB,SACEjB,MAAAA,OAAA,EAAAA,EAAekC,KAAoBA,EAAgBK,eAI3D,CAACvC,EAAc0B,IAcjB,OAXAlB,EAAAA,WAAU,MACJF,MAAAA,SAAAA,EAAQkC,aACVX,IAEAvB,EAAOQ,GAAG,UAAWkB,IAEhB,KACL1B,MAAAA,GAAAA,EAAQmC,IAAI,UAAWT,MAExB,CAACA,EAAU1B,EAAQuB,IAEf,CACLvB,OAAAA,EACAoB,MAAAA,EACAT,QAAAA,EACAd,iBAAAA"}