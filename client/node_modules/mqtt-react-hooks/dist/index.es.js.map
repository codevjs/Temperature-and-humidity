{"version":3,"file":"index.es.js","sources":["../lib/Context.tsx","../lib/useSubscription.tsx","../lib/useMqttState.tsx","../lib/Connector.tsx"],"sourcesContent":["/* istanbul ignore file */\n\nimport { createContext } from 'react';\n\nimport { IMqttContext } from './types';\n\nexport default createContext<IMqttContext>({} as IMqttContext);\n","import { useContext, useEffect, useCallback, useState } from 'react';\n\nimport { IClientSubscribeOptions } from 'mqtt';\nimport { matches } from 'mqtt-pattern';\n\nimport MqttContext from './Context';\nimport { IMqttContext as Context, IUseSubscription, IMessage } from './types';\n\nexport default function useSubscription(\n  topic: string | string[],\n  options: IClientSubscribeOptions = {} as IClientSubscribeOptions,\n): IUseSubscription {\n  const { client, connectionStatus, parserMethod } = useContext<Context>(\n    MqttContext,\n  );\n\n  const [message, setMessage] = useState<IMessage | undefined>(undefined);\n\n  const subscribe = useCallback(async () => {\n    client?.subscribe(topic, options);\n  }, [client, options, topic]);\n\n  const callback = useCallback(\n    (receivedTopic: string, receivedMessage: any) => {\n      if ([topic].flat().some(rTopic => matches(rTopic, receivedTopic))) {\n        setMessage({\n          topic: receivedTopic,\n          message:\n            parserMethod?.(receivedMessage) || receivedMessage.toString(),\n        });\n      }\n    },\n    [parserMethod, topic],\n  );\n\n  useEffect(() => {\n    if (client?.connected) {\n      subscribe();\n\n      client.on('message', callback);\n    }\n    return () => {\n      client?.off('message', callback);\n    };\n  }, [callback, client, subscribe]);\n\n  return {\n    client,\n    topic,\n    message,\n    connectionStatus,\n  };\n}\n","import { useContext } from 'react';\n\nimport MqttContext from './Context';\nimport { IMqttContext as Context } from './types';\n\nexport default function useMqttState() {\n  const { connectionStatus, client, parserMethod } = useContext<Context>(\n    MqttContext,\n  );\n\n  return {\n    connectionStatus,\n    client,\n    parserMethod,\n  };\n}\n","import React, { useEffect, useState, useMemo, useRef } from 'react';\n\nimport { connect, MqttClient } from 'mqtt';\n\nimport MqttContext from './Context';\nimport { Error, ConnectorProps, IMqttContext } from './types';\n\nexport default function Connector({\n  children,\n  brokerUrl,\n  options = { keepalive: 0 },\n  parserMethod,\n}: ConnectorProps) {\n  // Using a ref rather than relying on state because it is synchronous\n  const clientValid = useRef(false);\n  const [connectionStatus, setStatus] = useState<string | Error>('Offline');\n  const [client, setClient] = useState<MqttClient | null>(null);\n\n  useEffect(() => {\n    if (!client && !clientValid.current) {\n      // This synchronously ensures we won't enter this block again\n      // before the client is asynchronously set\n      clientValid.current = true;\n      setStatus('Connecting');\n      console.log(`attempting to connect to ${brokerUrl}`);\n      const mqtt = connect(brokerUrl, options);\n      mqtt.on('connect', () => {\n        console.debug('on connect');\n        setStatus('Connected');\n        // For some reason setting the client as soon as we get it from connect breaks things\n        setClient(mqtt);\n      });\n      mqtt.on('reconnect', () => {\n        console.debug('on reconnect');\n        setStatus('Reconnecting');\n      });\n      mqtt.on('error', err => {\n        console.log(`Connection error: ${err}`);\n        setStatus(err.message);\n      });\n      mqtt.on('offline', () => {\n        console.debug('on offline');\n        setStatus('Offline');\n      });\n      mqtt.on('end', () => {\n        console.debug('on end');\n        setStatus('Offline');\n      });\n    }\n  }, [client, clientValid, brokerUrl, options]);\n\n  // Only do this when the component unmounts\n  useEffect(\n    () => () => {\n      if (client) {\n        console.log('closing mqtt client');\n        client.end(true);\n        setClient(null);\n        clientValid.current = false;\n      }\n    },\n    [client, clientValid],\n  );\n\n  // This is to satisfy\n  // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-constructed-context-values.md\n  const value: IMqttContext = useMemo<IMqttContext>(\n    () => ({\n      connectionStatus,\n      client,\n      parserMethod,\n    }),\n    [connectionStatus, client, parserMethod],\n  );\n\n  return <MqttContext.Provider value={value}>{children}</MqttContext.Provider>;\n}\n"],"names":["MqttContext","createContext","useSubscription","topic","options","client","connectionStatus","parserMethod","useContext","message","setMessage","useState","undefined","subscribe","useCallback","async","callback","receivedTopic","receivedMessage","flat","some","rTopic","matches","toString","useEffect","connected","on","off","useMqttState","Connector","children","brokerUrl","keepalive","clientValid","useRef","setStatus","setClient","current","console","log","mqtt","connect","debug","err","end","value","useMemo","React","createElement","Provider"],"mappings":"sMAMA,IAAeA,EAAAC,EAA4B,ICEnB,SAAAC,EACtBC,EACAC,EAAmC,IAEnC,MAAMC,OAAEA,EAAMC,iBAAEA,EAAgBC,aAAEA,GAAiBC,EACjDR,IAGKS,EAASC,GAAcC,OAA+BC,GAEvDC,EAAYC,GAAYC,UAC5BV,MAAAA,GAAAA,EAAQQ,UAAUV,EAAOC,KACxB,CAACC,EAAQD,EAASD,IAEfa,EAAWF,GACf,CAACG,EAAuBC,KAClB,CAACf,GAAOgB,OAAOC,MAAKC,GAAUC,EAAQD,EAAQJ,MAChDP,EAAW,CACTP,MAAOc,EACPR,SACEF,MAAAA,OAAA,EAAAA,EAAeW,KAAoBA,EAAgBK,eAI3D,CAAChB,EAAcJ,IAcjB,OAXAqB,GAAU,MACJnB,MAAAA,SAAAA,EAAQoB,aACVZ,IAEAR,EAAOqB,GAAG,UAAWV,IAEhB,KACLX,MAAAA,GAAAA,EAAQsB,IAAI,UAAWX,MAExB,CAACA,EAAUX,EAAQQ,IAEf,CACLR,OAAAA,EACAF,MAAAA,EACAM,QAAAA,EACAH,iBAAAA,GC7CU,SAAUsB,IACtB,MAAMtB,iBAAEA,EAAgBD,OAAEA,EAAME,aAAEA,GAAiBC,EACjDR,GAGF,MAAO,CACLM,iBAAAA,EACAD,OAAAA,EACAE,aAAAA,GCNU,SAAUsB,GAAUC,SAChCA,EAAQC,UACRA,EAAS3B,QACTA,EAAU,CAAE4B,UAAW,GAAGzB,aAC1BA,IAGA,MAAM0B,EAAcC,GAAO,IACpB5B,EAAkB6B,GAAaxB,EAAyB,YACxDN,EAAQ+B,GAAazB,EAA4B,MAExDa,GAAU,KACR,IAAKnB,IAAW4B,EAAYI,QAAS,CAGnCJ,EAAYI,SAAU,EACtBF,EAAU,cACVG,QAAQC,IAAI,4BAA4BR,KACxC,MAAMS,EAAOC,EAAQV,EAAW3B,GAChCoC,EAAKd,GAAG,WAAW,KACjBY,QAAQI,MAAM,cACdP,EAAU,aAEVC,EAAUI,MAEZA,EAAKd,GAAG,aAAa,KACnBY,QAAQI,MAAM,gBACdP,EAAU,mBAEZK,EAAKd,GAAG,SAASiB,IACfL,QAAQC,IAAI,qBAAqBI,KACjCR,EAAUQ,EAAIlC,YAEhB+B,EAAKd,GAAG,WAAW,KACjBY,QAAQI,MAAM,cACdP,EAAU,cAEZK,EAAKd,GAAG,OAAO,KACbY,QAAQI,MAAM,UACdP,EAAU,iBAGb,CAAC9B,EAAQ4B,EAAaF,EAAW3B,IAGpCoB,GACE,IAAM,KACAnB,IACFiC,QAAQC,IAAI,uBACZlC,EAAOuC,KAAI,GACXR,EAAU,MACVH,EAAYI,SAAU,KAG1B,CAAChC,EAAQ4B,IAKX,MAAMY,EAAsBC,GAC1B,KAAO,CACLxC,iBAAAA,EACAD,OAAAA,EACAE,aAAAA,KAEF,CAACD,EAAkBD,EAAQE,IAG7B,OAAOwC,EAAAC,cAAChD,EAAYiD,SAAQ,CAACJ,MAAOA,GAAQf"}