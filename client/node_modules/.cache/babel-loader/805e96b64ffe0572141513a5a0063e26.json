{"ast":null,"code":"var _classCallCheck = require(\"/Users/Neutron/Project/Trisno/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/Neutron/Project/Trisno/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/Neutron/Project/Trisno/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/Neutron/Project/Trisno/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar bl = require('bl');\n\nvar EventEmitter = require('events');\n\nvar Packet = require('./packet');\n\nvar constants = require('./constants');\n\nvar debug = require('debug')('mqtt-packet:parser');\n\nvar Parser = /*#__PURE__*/function (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(Parser, _EventEmitter);\n\n  var _super = _createSuper(Parser);\n\n  function Parser() {\n    var _this;\n\n    _classCallCheck(this, Parser);\n\n    _this = _super.call(this);\n    _this.parser = _this.constructor.parser;\n    return _this;\n  }\n\n  _createClass(Parser, [{\n    key: \"_resetState\",\n    value: function _resetState() {\n      debug('_resetState: resetting packet, error, _list, and _stateCounter');\n      this.packet = new Packet();\n      this.error = null;\n      this._list = bl();\n      this._stateCounter = 0;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buf) {\n      if (this.error) this._resetState();\n\n      this._list.append(buf);\n\n      debug('parse: current state: %s', this._states[this._stateCounter]);\n\n      while ((this.packet.length !== -1 || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error) {\n        this._stateCounter++;\n        debug('parse: state complete. _stateCounter is now: %d', this._stateCounter);\n        debug('parse: packet.length: %d, buffer list length: %d', this.packet.length, this._list.length);\n        if (this._stateCounter >= this._states.length) this._stateCounter = 0;\n      }\n\n      debug('parse: exited while loop. packet: %d, buffer list length: %d', this.packet.length, this._list.length);\n      return this._list.length;\n    }\n  }, {\n    key: \"_parseHeader\",\n    value: function _parseHeader() {\n      // There is at least one byte in the buffer\n      var zero = this._list.readUInt8(0);\n\n      this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT];\n      this.packet.retain = (zero & constants.RETAIN_MASK) !== 0;\n      this.packet.qos = zero >> constants.QOS_SHIFT & constants.QOS_MASK;\n      this.packet.dup = (zero & constants.DUP_MASK) !== 0;\n      debug('_parseHeader: packet: %o', this.packet);\n\n      this._list.consume(1);\n\n      return true;\n    }\n  }, {\n    key: \"_parseLength\",\n    value: function _parseLength() {\n      // There is at least one byte in the list\n      var result = this._parseVarByteNum(true);\n\n      if (result) {\n        this.packet.length = result.value;\n\n        this._list.consume(result.bytes);\n      }\n\n      debug('_parseLength %d', result.value);\n      return !!result;\n    }\n  }, {\n    key: \"_parsePayload\",\n    value: function _parsePayload() {\n      debug('_parsePayload: payload %O', this._list);\n      var result = false; // Do we have a payload? Do we have enough data to complete the payload?\n      // PINGs have no payload\n\n      if (this.packet.length === 0 || this._list.length >= this.packet.length) {\n        this._pos = 0;\n\n        switch (this.packet.cmd) {\n          case 'connect':\n            this._parseConnect();\n\n            break;\n\n          case 'connack':\n            this._parseConnack();\n\n            break;\n\n          case 'publish':\n            this._parsePublish();\n\n            break;\n\n          case 'puback':\n          case 'pubrec':\n          case 'pubrel':\n          case 'pubcomp':\n            this._parseConfirmation();\n\n            break;\n\n          case 'subscribe':\n            this._parseSubscribe();\n\n            break;\n\n          case 'suback':\n            this._parseSuback();\n\n            break;\n\n          case 'unsubscribe':\n            this._parseUnsubscribe();\n\n            break;\n\n          case 'unsuback':\n            this._parseUnsuback();\n\n            break;\n\n          case 'pingreq':\n          case 'pingresp':\n            // These are empty, nothing to do\n            break;\n\n          case 'disconnect':\n            this._parseDisconnect();\n\n            break;\n\n          case 'auth':\n            this._parseAuth();\n\n            break;\n\n          default:\n            this._emitError(new Error('Not supported'));\n\n        }\n\n        result = true;\n      }\n\n      debug('_parsePayload complete result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parseConnect\",\n    value: function _parseConnect() {\n      debug('_parseConnect');\n      var topic; // Will topic\n\n      var payload; // Will payload\n\n      var password; // Password\n\n      var username; // Username\n\n      var flags = {};\n      var packet = this.packet; // Parse protocolId\n\n      var protocolId = this._parseString();\n\n      if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'));\n\n      if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {\n        return this._emitError(new Error('Invalid protocolId'));\n      }\n\n      packet.protocolId = protocolId; // Parse constants version number\n\n      if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'));\n      packet.protocolVersion = this._list.readUInt8(this._pos);\n\n      if (packet.protocolVersion >= 128) {\n        packet.bridgeMode = true;\n        packet.protocolVersion = packet.protocolVersion - 128;\n      }\n\n      if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5) {\n        return this._emitError(new Error('Invalid protocol version'));\n      }\n\n      this._pos++;\n\n      if (this._pos >= this._list.length) {\n        return this._emitError(new Error('Packet too short'));\n      } // Parse connect flags\n\n\n      flags.username = this._list.readUInt8(this._pos) & constants.USERNAME_MASK;\n      flags.password = this._list.readUInt8(this._pos) & constants.PASSWORD_MASK;\n      flags.will = this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK;\n\n      if (flags.will) {\n        packet.will = {};\n        packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0;\n        packet.will.qos = (this._list.readUInt8(this._pos) & constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT;\n      }\n\n      packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0;\n      this._pos++; // Parse keepalive\n\n      packet.keepalive = this._parseNum();\n      if (packet.keepalive === -1) return this._emitError(new Error('Packet too short')); // parse properties\n\n      if (packet.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      } // Parse clientId\n\n\n      var clientId = this._parseString();\n\n      if (clientId === null) return this._emitError(new Error('Packet too short'));\n      packet.clientId = clientId;\n      debug('_parseConnect: packet.clientId: %s', packet.clientId);\n\n      if (flags.will) {\n        if (packet.protocolVersion === 5) {\n          var willProperties = this._parseProperties();\n\n          if (Object.getOwnPropertyNames(willProperties).length) {\n            packet.will.properties = willProperties;\n          }\n        } // Parse will topic\n\n\n        topic = this._parseString();\n        if (topic === null) return this._emitError(new Error('Cannot parse will topic'));\n        packet.will.topic = topic;\n        debug('_parseConnect: packet.will.topic: %s', packet.will.topic); // Parse will payload\n\n        payload = this._parseBuffer();\n        if (payload === null) return this._emitError(new Error('Cannot parse will payload'));\n        packet.will.payload = payload;\n        debug('_parseConnect: packet.will.paylaod: %s', packet.will.payload);\n      } // Parse username\n\n\n      if (flags.username) {\n        username = this._parseString();\n        if (username === null) return this._emitError(new Error('Cannot parse username'));\n        packet.username = username;\n        debug('_parseConnect: packet.username: %s', packet.username);\n      } // Parse password\n\n\n      if (flags.password) {\n        password = this._parseBuffer();\n        if (password === null) return this._emitError(new Error('Cannot parse password'));\n        packet.password = password;\n      } // need for right parse auth packet and self set up\n\n\n      this.settings = packet;\n      debug('_parseConnect: complete');\n      return packet;\n    }\n  }, {\n    key: \"_parseConnack\",\n    value: function _parseConnack() {\n      debug('_parseConnack');\n      var packet = this.packet;\n      if (this._list.length < 1) return null;\n      packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK);\n\n      if (this.settings.protocolVersion === 5) {\n        if (this._list.length >= 2) {\n          packet.reasonCode = this._list.readUInt8(this._pos++);\n        } else {\n          packet.reasonCode = 0;\n        }\n      } else {\n        if (this._list.length < 2) return null;\n        packet.returnCode = this._list.readUInt8(this._pos++);\n      }\n\n      if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error('Cannot parse return code')); // mqtt 5 properties\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      debug('_parseConnack: complete');\n    }\n  }, {\n    key: \"_parsePublish\",\n    value: function _parsePublish() {\n      debug('_parsePublish');\n      var packet = this.packet;\n      packet.topic = this._parseString();\n      if (packet.topic === null) return this._emitError(new Error('Cannot parse topic')); // Parse messageId\n\n      if (packet.qos > 0) if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      packet.payload = this._list.slice(this._pos, packet.length);\n      debug('_parsePublish: payload from buffer list: %o', packet.payload);\n    }\n  }, {\n    key: \"_parseSubscribe\",\n    value: function _parseSubscribe() {\n      debug('_parseSubscribe');\n      var packet = this.packet;\n      var topic;\n      var options;\n      var qos;\n      var rh;\n      var rap;\n      var nl;\n      var subscription;\n\n      if (packet.qos !== 1) {\n        return this._emitError(new Error('Wrong subscribe header'));\n      }\n\n      packet.subscriptions = [];\n\n      if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      while (this._pos < packet.length) {\n        // Parse topic\n        topic = this._parseString();\n        if (topic === null) return this._emitError(new Error('Cannot parse topic'));\n        if (this._pos >= packet.length) return this._emitError(new Error('Malformed Subscribe Payload'));\n        options = this._parseByte();\n        qos = options & constants.SUBSCRIBE_OPTIONS_QOS_MASK;\n        nl = (options >> constants.SUBSCRIBE_OPTIONS_NL_SHIFT & constants.SUBSCRIBE_OPTIONS_NL_MASK) !== 0;\n        rap = (options >> constants.SUBSCRIBE_OPTIONS_RAP_SHIFT & constants.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0;\n        rh = options >> constants.SUBSCRIBE_OPTIONS_RH_SHIFT & constants.SUBSCRIBE_OPTIONS_RH_MASK;\n        subscription = {\n          topic: topic,\n          qos: qos\n        }; // mqtt 5 options\n\n        if (this.settings.protocolVersion === 5) {\n          subscription.nl = nl;\n          subscription.rap = rap;\n          subscription.rh = rh;\n        } else if (this.settings.bridgeMode) {\n          subscription.rh = 0;\n          subscription.rap = true;\n          subscription.nl = true;\n        } // Push pair to subscriptions\n\n\n        debug('_parseSubscribe: push subscription `%s` to subscription', subscription);\n        packet.subscriptions.push(subscription);\n      }\n    }\n  }, {\n    key: \"_parseSuback\",\n    value: function _parseSuback() {\n      debug('_parseSuback');\n      var packet = this.packet;\n      this.packet.granted = [];\n\n      if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      } // Parse granted QoSes\n\n\n      while (this._pos < this.packet.length) {\n        this.packet.granted.push(this._list.readUInt8(this._pos++));\n      }\n    }\n  }, {\n    key: \"_parseUnsubscribe\",\n    value: function _parseUnsubscribe() {\n      debug('_parseUnsubscribe');\n      var packet = this.packet;\n      packet.unsubscriptions = []; // Parse messageId\n\n      if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      while (this._pos < packet.length) {\n        // Parse topic\n        var topic = this._parseString();\n\n        if (topic === null) return this._emitError(new Error('Cannot parse topic')); // Push topic to unsubscriptions\n\n        debug('_parseUnsubscribe: push topic `%s` to unsubscriptions', topic);\n        packet.unsubscriptions.push(topic);\n      }\n    }\n  }, {\n    key: \"_parseUnsuback\",\n    value: function _parseUnsuback() {\n      debug('_parseUnsuback');\n      var packet = this.packet;\n      if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId')); // Properties mqtt 5\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        } // Parse granted QoSes\n\n\n        packet.granted = [];\n\n        while (this._pos < this.packet.length) {\n          this.packet.granted.push(this._list.readUInt8(this._pos++));\n        }\n      }\n    } // parse packets like puback, pubrec, pubrel, pubcomp\n\n  }, {\n    key: \"_parseConfirmation\",\n    value: function _parseConfirmation() {\n      debug('_parseConfirmation: packet.cmd: `%s`', this.packet.cmd);\n      var packet = this.packet;\n\n      this._parseMessageId();\n\n      if (this.settings.protocolVersion === 5) {\n        if (packet.length > 2) {\n          // response code\n          packet.reasonCode = this._parseByte();\n          debug('_parseConfirmation: packet.reasonCode `%d`', packet.reasonCode);\n        } else {\n          packet.reasonCode = 0;\n        }\n\n        if (packet.length > 3) {\n          // properies mqtt 5\n          var properties = this._parseProperties();\n\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n      }\n\n      return true;\n    } // parse disconnect packet\n\n  }, {\n    key: \"_parseDisconnect\",\n    value: function _parseDisconnect() {\n      var packet = this.packet;\n      debug('_parseDisconnect');\n\n      if (this.settings.protocolVersion === 5) {\n        // response code\n        if (this._list.length > 0) {\n          packet.reasonCode = this._parseByte();\n        } else {\n          packet.reasonCode = 0;\n        } // properies mqtt 5\n\n\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      debug('_parseDisconnect result: true');\n      return true;\n    } // parse auth packet\n\n  }, {\n    key: \"_parseAuth\",\n    value: function _parseAuth() {\n      debug('_parseAuth');\n      var packet = this.packet;\n\n      if (this.settings.protocolVersion !== 5) {\n        return this._emitError(new Error('Not supported auth packet for this version MQTT'));\n      } // response code\n\n\n      packet.reasonCode = this._parseByte(); // properies mqtt 5\n\n      var properties = this._parseProperties();\n\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties;\n      }\n\n      debug('_parseAuth: result: true');\n      return true;\n    }\n  }, {\n    key: \"_parseMessageId\",\n    value: function _parseMessageId() {\n      var packet = this.packet;\n      packet.messageId = this._parseNum();\n\n      if (packet.messageId === null) {\n        this._emitError(new Error('Cannot parse messageId'));\n\n        return false;\n      }\n\n      debug('_parseMessageId: packet.messageId %d', packet.messageId);\n      return true;\n    }\n  }, {\n    key: \"_parseString\",\n    value: function _parseString(maybeBuffer) {\n      var length = this._parseNum();\n\n      var end = length + this._pos;\n      if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n\n      var result = this._list.toString('utf8', this._pos, end);\n\n      this._pos += length;\n      debug('_parseString: result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parseStringPair\",\n    value: function _parseStringPair() {\n      debug('_parseStringPair');\n      return {\n        name: this._parseString(),\n        value: this._parseString()\n      };\n    }\n  }, {\n    key: \"_parseBuffer\",\n    value: function _parseBuffer() {\n      var length = this._parseNum();\n\n      var end = length + this._pos;\n      if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n\n      var result = this._list.slice(this._pos, end);\n\n      this._pos += length;\n      debug('_parseBuffer: result: %o', result);\n      return result;\n    }\n  }, {\n    key: \"_parseNum\",\n    value: function _parseNum() {\n      if (this._list.length - this._pos < 2) return -1;\n\n      var result = this._list.readUInt16BE(this._pos);\n\n      this._pos += 2;\n      debug('_parseNum: result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parse4ByteNum\",\n    value: function _parse4ByteNum() {\n      if (this._list.length - this._pos < 4) return -1;\n\n      var result = this._list.readUInt32BE(this._pos);\n\n      this._pos += 4;\n      debug('_parse4ByteNum: result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parseVarByteNum\",\n    value: function _parseVarByteNum(fullInfoFlag) {\n      debug('_parseVarByteNum');\n      var maxBytes = 4;\n      var bytes = 0;\n      var mul = 1;\n      var value = 0;\n      var result = false;\n      var current;\n      var padding = this._pos ? this._pos : 0;\n\n      while (bytes < maxBytes && padding + bytes < this._list.length) {\n        current = this._list.readUInt8(padding + bytes++);\n        value += mul * (current & constants.VARBYTEINT_MASK);\n        mul *= 0x80;\n\n        if ((current & constants.VARBYTEINT_FIN_MASK) === 0) {\n          result = true;\n          break;\n        }\n\n        if (this._list.length <= bytes) {\n          break;\n        }\n      }\n\n      if (!result && bytes === maxBytes && this._list.length >= bytes) {\n        this._emitError(new Error('Invalid variable byte integer'));\n      }\n\n      if (padding) {\n        this._pos += bytes;\n      }\n\n      result = result ? fullInfoFlag ? {\n        bytes: bytes,\n        value: value\n      } : value : false;\n      debug('_parseVarByteNum: result: %o', result);\n      return result;\n    }\n  }, {\n    key: \"_parseByte\",\n    value: function _parseByte() {\n      var result;\n\n      if (this._pos < this._list.length) {\n        result = this._list.readUInt8(this._pos);\n        this._pos++;\n      }\n\n      debug('_parseByte: result: %o', result);\n      return result;\n    }\n  }, {\n    key: \"_parseByType\",\n    value: function _parseByType(type) {\n      debug('_parseByType: type: %s', type);\n\n      switch (type) {\n        case 'byte':\n          {\n            return this._parseByte() !== 0;\n          }\n\n        case 'int8':\n          {\n            return this._parseByte();\n          }\n\n        case 'int16':\n          {\n            return this._parseNum();\n          }\n\n        case 'int32':\n          {\n            return this._parse4ByteNum();\n          }\n\n        case 'var':\n          {\n            return this._parseVarByteNum();\n          }\n\n        case 'string':\n          {\n            return this._parseString();\n          }\n\n        case 'pair':\n          {\n            return this._parseStringPair();\n          }\n\n        case 'binary':\n          {\n            return this._parseBuffer();\n          }\n      }\n    }\n  }, {\n    key: \"_parseProperties\",\n    value: function _parseProperties() {\n      debug('_parseProperties');\n\n      var length = this._parseVarByteNum();\n\n      var start = this._pos;\n      var end = start + length;\n      var result = {};\n\n      while (this._pos < end) {\n        var type = this._parseByte();\n\n        if (!type) {\n          this._emitError(new Error('Cannot parse property code type'));\n\n          return false;\n        }\n\n        var name = constants.propertiesCodes[type];\n\n        if (!name) {\n          this._emitError(new Error('Unknown property'));\n\n          return false;\n        } // user properties process\n\n\n        if (name === 'userProperties') {\n          if (!result[name]) {\n            result[name] = Object.create(null);\n          }\n\n          var currentUserProperty = this._parseByType(constants.propertiesTypes[name]);\n\n          if (result[name][currentUserProperty.name]) {\n            if (Array.isArray(result[name][currentUserProperty.name])) {\n              result[name][currentUserProperty.name].push(currentUserProperty.value);\n            } else {\n              var currentValue = result[name][currentUserProperty.name];\n              result[name][currentUserProperty.name] = [currentValue];\n              result[name][currentUserProperty.name].push(currentUserProperty.value);\n            }\n          } else {\n            result[name][currentUserProperty.name] = currentUserProperty.value;\n          }\n\n          continue;\n        }\n\n        if (result[name]) {\n          if (Array.isArray(result[name])) {\n            result[name].push(this._parseByType(constants.propertiesTypes[name]));\n          } else {\n            result[name] = [result[name]];\n            result[name].push(this._parseByType(constants.propertiesTypes[name]));\n          }\n        } else {\n          result[name] = this._parseByType(constants.propertiesTypes[name]);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_newPacket\",\n    value: function _newPacket() {\n      debug('_newPacket');\n\n      if (this.packet) {\n        this._list.consume(this.packet.length);\n\n        debug('_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d', this.packet.cmd, this.packet.payload, this.packet.length);\n        this.emit('packet', this.packet);\n      }\n\n      debug('_newPacket: new packet');\n      this.packet = new Packet();\n      this._pos = 0;\n      return true;\n    }\n  }, {\n    key: \"_emitError\",\n    value: function _emitError(err) {\n      debug('_emitError');\n      this.error = err;\n      this.emit('error', err);\n    }\n  }], [{\n    key: \"parser\",\n    value: function parser(opt) {\n      if (!(this instanceof Parser)) return new Parser().parser(opt);\n      this.settings = opt || {};\n      this._states = ['_parseHeader', '_parseLength', '_parsePayload', '_newPacket'];\n\n      this._resetState();\n\n      return this;\n    }\n  }]);\n\n  return Parser;\n}(EventEmitter);\n\nmodule.exports = Parser;","map":{"version":3,"names":["bl","require","EventEmitter","Packet","constants","debug","Parser","parser","constructor","packet","error","_list","_stateCounter","buf","_resetState","append","_states","length","zero","readUInt8","cmd","types","CMD_SHIFT","retain","RETAIN_MASK","qos","QOS_SHIFT","QOS_MASK","dup","DUP_MASK","consume","result","_parseVarByteNum","value","bytes","_pos","_parseConnect","_parseConnack","_parsePublish","_parseConfirmation","_parseSubscribe","_parseSuback","_parseUnsubscribe","_parseUnsuback","_parseDisconnect","_parseAuth","_emitError","Error","topic","payload","password","username","flags","protocolId","_parseString","protocolVersion","bridgeMode","USERNAME_MASK","PASSWORD_MASK","will","WILL_FLAG_MASK","WILL_RETAIN_MASK","WILL_QOS_MASK","WILL_QOS_SHIFT","clean","CLEAN_SESSION_MASK","keepalive","_parseNum","properties","_parseProperties","Object","getOwnPropertyNames","clientId","willProperties","_parseBuffer","settings","sessionPresent","SESSIONPRESENT_MASK","reasonCode","returnCode","_parseMessageId","slice","options","rh","rap","nl","subscription","subscriptions","_parseByte","SUBSCRIBE_OPTIONS_QOS_MASK","SUBSCRIBE_OPTIONS_NL_SHIFT","SUBSCRIBE_OPTIONS_NL_MASK","SUBSCRIBE_OPTIONS_RAP_SHIFT","SUBSCRIBE_OPTIONS_RAP_MASK","SUBSCRIBE_OPTIONS_RH_SHIFT","SUBSCRIBE_OPTIONS_RH_MASK","push","granted","unsubscriptions","messageId","maybeBuffer","end","toString","name","readUInt16BE","readUInt32BE","fullInfoFlag","maxBytes","mul","current","padding","VARBYTEINT_MASK","VARBYTEINT_FIN_MASK","type","_parse4ByteNum","_parseStringPair","start","propertiesCodes","create","currentUserProperty","_parseByType","propertiesTypes","Array","isArray","currentValue","emit","err","opt","module","exports"],"sources":["/Users/Neutron/Project/Trisno/client/node_modules/mqtt-packet/parser.js"],"sourcesContent":["const bl = require('bl')\nconst EventEmitter = require('events')\nconst Packet = require('./packet')\nconst constants = require('./constants')\nconst debug = require('debug')('mqtt-packet:parser')\n\nclass Parser extends EventEmitter {\n  constructor () {\n    super()\n    this.parser = this.constructor.parser\n  }\n\n  static parser (opt) {\n    if (!(this instanceof Parser)) return (new Parser()).parser(opt)\n\n    this.settings = opt || {}\n\n    this._states = [\n      '_parseHeader',\n      '_parseLength',\n      '_parsePayload',\n      '_newPacket'\n    ]\n\n    this._resetState()\n    return this\n  }\n\n  _resetState () {\n    debug('_resetState: resetting packet, error, _list, and _stateCounter')\n    this.packet = new Packet()\n    this.error = null\n    this._list = bl()\n    this._stateCounter = 0\n  }\n\n  parse (buf) {\n    if (this.error) this._resetState()\n\n    this._list.append(buf)\n    debug('parse: current state: %s', this._states[this._stateCounter])\n    while ((this.packet.length !== -1 || this._list.length > 0) &&\n      this[this._states[this._stateCounter]]() &&\n      !this.error) {\n      this._stateCounter++\n      debug('parse: state complete. _stateCounter is now: %d', this._stateCounter)\n      debug('parse: packet.length: %d, buffer list length: %d', this.packet.length, this._list.length)\n      if (this._stateCounter >= this._states.length) this._stateCounter = 0\n    }\n    debug('parse: exited while loop. packet: %d, buffer list length: %d', this.packet.length, this._list.length)\n    return this._list.length\n  }\n\n  _parseHeader () {\n    // There is at least one byte in the buffer\n    const zero = this._list.readUInt8(0)\n    this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT]\n    this.packet.retain = (zero & constants.RETAIN_MASK) !== 0\n    this.packet.qos = (zero >> constants.QOS_SHIFT) & constants.QOS_MASK\n    this.packet.dup = (zero & constants.DUP_MASK) !== 0\n    debug('_parseHeader: packet: %o', this.packet)\n\n    this._list.consume(1)\n\n    return true\n  }\n\n  _parseLength () {\n    // There is at least one byte in the list\n    const result = this._parseVarByteNum(true)\n\n    if (result) {\n      this.packet.length = result.value\n      this._list.consume(result.bytes)\n    }\n    debug('_parseLength %d', result.value)\n    return !!result\n  }\n\n  _parsePayload () {\n    debug('_parsePayload: payload %O', this._list)\n    let result = false\n\n    // Do we have a payload? Do we have enough data to complete the payload?\n    // PINGs have no payload\n    if (this.packet.length === 0 || this._list.length >= this.packet.length) {\n      this._pos = 0\n\n      switch (this.packet.cmd) {\n        case 'connect':\n          this._parseConnect()\n          break\n        case 'connack':\n          this._parseConnack()\n          break\n        case 'publish':\n          this._parsePublish()\n          break\n        case 'puback':\n        case 'pubrec':\n        case 'pubrel':\n        case 'pubcomp':\n          this._parseConfirmation()\n          break\n        case 'subscribe':\n          this._parseSubscribe()\n          break\n        case 'suback':\n          this._parseSuback()\n          break\n        case 'unsubscribe':\n          this._parseUnsubscribe()\n          break\n        case 'unsuback':\n          this._parseUnsuback()\n          break\n        case 'pingreq':\n        case 'pingresp':\n          // These are empty, nothing to do\n          break\n        case 'disconnect':\n          this._parseDisconnect()\n          break\n        case 'auth':\n          this._parseAuth()\n          break\n        default:\n          this._emitError(new Error('Not supported'))\n      }\n\n      result = true\n    }\n    debug('_parsePayload complete result: %s', result)\n    return result\n  }\n\n  _parseConnect () {\n    debug('_parseConnect')\n    let topic // Will topic\n    let payload // Will payload\n    let password // Password\n    let username // Username\n    const flags = {}\n    const packet = this.packet\n\n    // Parse protocolId\n    const protocolId = this._parseString()\n\n    if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'))\n    if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {\n      return this._emitError(new Error('Invalid protocolId'))\n    }\n\n    packet.protocolId = protocolId\n\n    // Parse constants version number\n    if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'))\n\n    packet.protocolVersion = this._list.readUInt8(this._pos)\n\n    if (packet.protocolVersion >= 128) {\n      packet.bridgeMode = true\n      packet.protocolVersion = packet.protocolVersion - 128\n    }\n\n    if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5) {\n      return this._emitError(new Error('Invalid protocol version'))\n    }\n\n    this._pos++\n\n    if (this._pos >= this._list.length) {\n      return this._emitError(new Error('Packet too short'))\n    }\n\n    // Parse connect flags\n    flags.username = (this._list.readUInt8(this._pos) & constants.USERNAME_MASK)\n    flags.password = (this._list.readUInt8(this._pos) & constants.PASSWORD_MASK)\n    flags.will = (this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK)\n\n    if (flags.will) {\n      packet.will = {}\n      packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0\n      packet.will.qos = (this._list.readUInt8(this._pos) &\n        constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT\n    }\n\n    packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0\n    this._pos++\n\n    // Parse keepalive\n    packet.keepalive = this._parseNum()\n    if (packet.keepalive === -1) return this._emitError(new Error('Packet too short'))\n\n    // parse properties\n    if (packet.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n    // Parse clientId\n    const clientId = this._parseString()\n    if (clientId === null) return this._emitError(new Error('Packet too short'))\n    packet.clientId = clientId\n    debug('_parseConnect: packet.clientId: %s', packet.clientId)\n\n    if (flags.will) {\n      if (packet.protocolVersion === 5) {\n        const willProperties = this._parseProperties()\n        if (Object.getOwnPropertyNames(willProperties).length) {\n          packet.will.properties = willProperties\n        }\n      }\n      // Parse will topic\n      topic = this._parseString()\n      if (topic === null) return this._emitError(new Error('Cannot parse will topic'))\n      packet.will.topic = topic\n      debug('_parseConnect: packet.will.topic: %s', packet.will.topic)\n\n      // Parse will payload\n      payload = this._parseBuffer()\n      if (payload === null) return this._emitError(new Error('Cannot parse will payload'))\n      packet.will.payload = payload\n      debug('_parseConnect: packet.will.paylaod: %s', packet.will.payload)\n    }\n\n    // Parse username\n    if (flags.username) {\n      username = this._parseString()\n      if (username === null) return this._emitError(new Error('Cannot parse username'))\n      packet.username = username\n      debug('_parseConnect: packet.username: %s', packet.username)\n    }\n\n    // Parse password\n    if (flags.password) {\n      password = this._parseBuffer()\n      if (password === null) return this._emitError(new Error('Cannot parse password'))\n      packet.password = password\n    }\n    // need for right parse auth packet and self set up\n    this.settings = packet\n    debug('_parseConnect: complete')\n    return packet\n  }\n\n  _parseConnack () {\n    debug('_parseConnack')\n    const packet = this.packet\n\n    if (this._list.length < 1) return null\n    packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK)\n\n    if (this.settings.protocolVersion === 5) {\n      if (this._list.length >= 2) {\n        packet.reasonCode = this._list.readUInt8(this._pos++)\n      } else {\n        packet.reasonCode = 0\n      }\n    } else {\n      if (this._list.length < 2) return null\n      packet.returnCode = this._list.readUInt8(this._pos++)\n    }\n\n    if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error('Cannot parse return code'))\n    // mqtt 5 properties\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n    debug('_parseConnack: complete')\n  }\n\n  _parsePublish () {\n    debug('_parsePublish')\n    const packet = this.packet\n    packet.topic = this._parseString()\n\n    if (packet.topic === null) return this._emitError(new Error('Cannot parse topic'))\n\n    // Parse messageId\n    if (packet.qos > 0) if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    packet.payload = this._list.slice(this._pos, packet.length)\n    debug('_parsePublish: payload from buffer list: %o', packet.payload)\n  }\n\n  _parseSubscribe () {\n    debug('_parseSubscribe')\n    const packet = this.packet\n    let topic\n    let options\n    let qos\n    let rh\n    let rap\n    let nl\n    let subscription\n\n    if (packet.qos !== 1) {\n      return this._emitError(new Error('Wrong subscribe header'))\n    }\n\n    packet.subscriptions = []\n\n    if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    while (this._pos < packet.length) {\n      // Parse topic\n      topic = this._parseString()\n      if (topic === null) return this._emitError(new Error('Cannot parse topic'))\n      if (this._pos >= packet.length) return this._emitError(new Error('Malformed Subscribe Payload'))\n\n      options = this._parseByte()\n      qos = options & constants.SUBSCRIBE_OPTIONS_QOS_MASK\n      nl = ((options >> constants.SUBSCRIBE_OPTIONS_NL_SHIFT) & constants.SUBSCRIBE_OPTIONS_NL_MASK) !== 0\n      rap = ((options >> constants.SUBSCRIBE_OPTIONS_RAP_SHIFT) & constants.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0\n      rh = (options >> constants.SUBSCRIBE_OPTIONS_RH_SHIFT) & constants.SUBSCRIBE_OPTIONS_RH_MASK\n\n      subscription = { topic, qos }\n\n      // mqtt 5 options\n      if (this.settings.protocolVersion === 5) {\n        subscription.nl = nl\n        subscription.rap = rap\n        subscription.rh = rh\n      } else if (this.settings.bridgeMode) {\n        subscription.rh = 0\n        subscription.rap = true\n        subscription.nl = true\n      }\n\n      // Push pair to subscriptions\n      debug('_parseSubscribe: push subscription `%s` to subscription', subscription)\n      packet.subscriptions.push(subscription)\n    }\n  }\n\n  _parseSuback () {\n    debug('_parseSuback')\n    const packet = this.packet\n    this.packet.granted = []\n\n    if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    // Parse granted QoSes\n    while (this._pos < this.packet.length) {\n      this.packet.granted.push(this._list.readUInt8(this._pos++))\n    }\n  }\n\n  _parseUnsubscribe () {\n    debug('_parseUnsubscribe')\n    const packet = this.packet\n\n    packet.unsubscriptions = []\n\n    // Parse messageId\n    if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    while (this._pos < packet.length) {\n      // Parse topic\n      const topic = this._parseString()\n      if (topic === null) return this._emitError(new Error('Cannot parse topic'))\n\n      // Push topic to unsubscriptions\n      debug('_parseUnsubscribe: push topic `%s` to unsubscriptions', topic)\n      packet.unsubscriptions.push(topic)\n    }\n  }\n\n  _parseUnsuback () {\n    debug('_parseUnsuback')\n    const packet = this.packet\n    if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId'))\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n      // Parse granted QoSes\n      packet.granted = []\n      while (this._pos < this.packet.length) {\n        this.packet.granted.push(this._list.readUInt8(this._pos++))\n      }\n    }\n  }\n\n  // parse packets like puback, pubrec, pubrel, pubcomp\n  _parseConfirmation () {\n    debug('_parseConfirmation: packet.cmd: `%s`', this.packet.cmd)\n    const packet = this.packet\n\n    this._parseMessageId()\n\n    if (this.settings.protocolVersion === 5) {\n      if (packet.length > 2) {\n        // response code\n        packet.reasonCode = this._parseByte()\n        debug('_parseConfirmation: packet.reasonCode `%d`', packet.reasonCode)\n      } else {\n        packet.reasonCode = 0\n      }\n\n      if (packet.length > 3) {\n        // properies mqtt 5\n        const properties = this._parseProperties()\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties\n        }\n      }\n    }\n\n    return true\n  }\n\n  // parse disconnect packet\n  _parseDisconnect () {\n    const packet = this.packet\n    debug('_parseDisconnect')\n\n    if (this.settings.protocolVersion === 5) {\n      // response code\n      if (this._list.length > 0) {\n        packet.reasonCode = this._parseByte()\n      } else {\n        packet.reasonCode = 0\n      }\n      // properies mqtt 5\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    debug('_parseDisconnect result: true')\n    return true\n  }\n\n  // parse auth packet\n  _parseAuth () {\n    debug('_parseAuth')\n    const packet = this.packet\n\n    if (this.settings.protocolVersion !== 5) {\n      return this._emitError(new Error('Not supported auth packet for this version MQTT'))\n    }\n\n    // response code\n    packet.reasonCode = this._parseByte()\n    // properies mqtt 5\n    const properties = this._parseProperties()\n    if (Object.getOwnPropertyNames(properties).length) {\n      packet.properties = properties\n    }\n\n    debug('_parseAuth: result: true')\n    return true\n  }\n\n  _parseMessageId () {\n    const packet = this.packet\n\n    packet.messageId = this._parseNum()\n\n    if (packet.messageId === null) {\n      this._emitError(new Error('Cannot parse messageId'))\n      return false\n    }\n\n    debug('_parseMessageId: packet.messageId %d', packet.messageId)\n    return true\n  }\n\n  _parseString (maybeBuffer) {\n    const length = this._parseNum()\n    const end = length + this._pos\n\n    if (length === -1 || end > this._list.length || end > this.packet.length) return null\n\n    const result = this._list.toString('utf8', this._pos, end)\n    this._pos += length\n    debug('_parseString: result: %s', result)\n    return result\n  }\n\n  _parseStringPair () {\n    debug('_parseStringPair')\n    return {\n      name: this._parseString(),\n      value: this._parseString()\n    }\n  }\n\n  _parseBuffer () {\n    const length = this._parseNum()\n    const end = length + this._pos\n\n    if (length === -1 || end > this._list.length || end > this.packet.length) return null\n\n    const result = this._list.slice(this._pos, end)\n\n    this._pos += length\n    debug('_parseBuffer: result: %o', result)\n    return result\n  }\n\n  _parseNum () {\n    if (this._list.length - this._pos < 2) return -1\n\n    const result = this._list.readUInt16BE(this._pos)\n    this._pos += 2\n    debug('_parseNum: result: %s', result)\n    return result\n  }\n\n  _parse4ByteNum () {\n    if (this._list.length - this._pos < 4) return -1\n\n    const result = this._list.readUInt32BE(this._pos)\n    this._pos += 4\n    debug('_parse4ByteNum: result: %s', result)\n    return result\n  }\n\n  _parseVarByteNum (fullInfoFlag) {\n    debug('_parseVarByteNum')\n    const maxBytes = 4\n    let bytes = 0\n    let mul = 1\n    let value = 0\n    let result = false\n    let current\n    const padding = this._pos ? this._pos : 0\n\n    while (bytes < maxBytes && (padding + bytes) < this._list.length) {\n      current = this._list.readUInt8(padding + bytes++)\n      value += mul * (current & constants.VARBYTEINT_MASK)\n      mul *= 0x80\n\n      if ((current & constants.VARBYTEINT_FIN_MASK) === 0) {\n        result = true\n        break\n      }\n      if (this._list.length <= bytes) {\n        break\n      }\n    }\n\n    if (!result && bytes === maxBytes && this._list.length >= bytes) {\n      this._emitError(new Error('Invalid variable byte integer'))\n    }\n\n    if (padding) {\n      this._pos += bytes\n    }\n\n    result = result\n      ? fullInfoFlag ? {\n        bytes,\n        value\n      } : value\n      : false\n\n    debug('_parseVarByteNum: result: %o', result)\n    return result\n  }\n\n  _parseByte () {\n    let result\n    if (this._pos < this._list.length) {\n      result = this._list.readUInt8(this._pos)\n      this._pos++\n    }\n    debug('_parseByte: result: %o', result)\n    return result\n  }\n\n  _parseByType (type) {\n    debug('_parseByType: type: %s', type)\n    switch (type) {\n      case 'byte': {\n        return this._parseByte() !== 0\n      }\n      case 'int8': {\n        return this._parseByte()\n      }\n      case 'int16': {\n        return this._parseNum()\n      }\n      case 'int32': {\n        return this._parse4ByteNum()\n      }\n      case 'var': {\n        return this._parseVarByteNum()\n      }\n      case 'string': {\n        return this._parseString()\n      }\n      case 'pair': {\n        return this._parseStringPair()\n      }\n      case 'binary': {\n        return this._parseBuffer()\n      }\n    }\n  }\n\n  _parseProperties () {\n    debug('_parseProperties')\n    const length = this._parseVarByteNum()\n    const start = this._pos\n    const end = start + length\n    const result = {}\n    while (this._pos < end) {\n      const type = this._parseByte()\n      if (!type) {\n        this._emitError(new Error('Cannot parse property code type'))\n        return false\n      }\n      const name = constants.propertiesCodes[type]\n      if (!name) {\n        this._emitError(new Error('Unknown property'))\n        return false\n      }\n      // user properties process\n      if (name === 'userProperties') {\n        if (!result[name]) {\n          result[name] = Object.create(null)\n        }\n        const currentUserProperty = this._parseByType(constants.propertiesTypes[name])\n        if (result[name][currentUserProperty.name]) {\n          if (Array.isArray(result[name][currentUserProperty.name])) {\n            result[name][currentUserProperty.name].push(currentUserProperty.value)\n          } else {\n            const currentValue = result[name][currentUserProperty.name]\n            result[name][currentUserProperty.name] = [currentValue]\n            result[name][currentUserProperty.name].push(currentUserProperty.value)\n          }\n        } else {\n          result[name][currentUserProperty.name] = currentUserProperty.value\n        }\n        continue\n      }\n      if (result[name]) {\n        if (Array.isArray(result[name])) {\n          result[name].push(this._parseByType(constants.propertiesTypes[name]))\n        } else {\n          result[name] = [result[name]]\n          result[name].push(this._parseByType(constants.propertiesTypes[name]))\n        }\n      } else {\n        result[name] = this._parseByType(constants.propertiesTypes[name])\n      }\n    }\n    return result\n  }\n\n  _newPacket () {\n    debug('_newPacket')\n    if (this.packet) {\n      this._list.consume(this.packet.length)\n      debug('_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d', this.packet.cmd, this.packet.payload, this.packet.length)\n      this.emit('packet', this.packet)\n    }\n    debug('_newPacket: new packet')\n    this.packet = new Packet()\n\n    this._pos = 0\n\n    return true\n  }\n\n  _emitError (err) {\n    debug('_emitError')\n    this.error = err\n    this.emit('error', err)\n  }\n}\n\nmodule.exports = Parser\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}